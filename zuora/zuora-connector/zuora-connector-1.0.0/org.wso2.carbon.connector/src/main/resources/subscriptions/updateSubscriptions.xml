<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~   WSO2 Inc. licenses this file to you under the Apache License,
  ~   Version 2.0 (the "License"); you may not use this file except
  ~   in compliance with the License.
  ~   You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  -->
<template name="updateSubscription" onError="fault" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="termType" description="Possible values are: TERMED, EVERGREEN"/>
    <parameter name="contractEffectiveDate" description="Effective contract date for this subscription, as yyyy-mm-dd"/>
    <parameter name="termStartDate" description="The date on which the subscription term begins"/>
    <parameter name="notes" description="String of up to 500 characters"/>
    <parameter name="invoiceCollect"
               description="If true (default), an invoice is generated and payment collected automatically during the subscription process"/>
    <parameter name="invoiceTargetDate"
               description="Date through which to calculate charges if an invoice is generated"/>
    <parameter name="invoiceSeparately"
               description="Separates a single subscription from other subscriptions and invoices the charge independently"/>
    <parameter name="previewType" description="The type of preview you will receive"/>
    <parameter name="includeExistingDraftInvoiceItems"
               description="Specifies whether to include draft invoice items in subscription previews"/>
    <parameter name="autoRenew"
               description="If true, this subscription automatically renews at the end of the subscription term"/>
    <parameter name="renewalTerm" description="The length of the period for the subscription renewal term"/>
    <parameter name="renewalTermPeriodType" description="The period type for the subscription renewal term"/>
    <parameter name="renewalSetting"
               description="Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed"/>
    <parameter name="invoice" description="Creates an invoice for a subscription"/>
    <parameter name="collect" description="Collects an automatic payment for a subscription"/>
    <parameter name="applyCreditBalance" description="Applies a credit balance to an invoice"/>
    <parameter name="cfTxtnC" description="One or more optional custom fields"/>
    <parameter name="cfPknC" description="One or more optional custom fields"/>
    <parameter name="subscriptionKey" description="Subscription number"/>
    <parameter name="currentTerm" description="The length of the period for the current subscription term"/>
    <parameter name="currentTermPeriodType" description="The period type for the current subscription term"/>
    <parameter name="update" description="Container for updating one or more rate plans"/>
    <sequence>
        <property name="uri.var.zuora.termType" expression="$func:termType"/>
        <property name="uri.var.zuora.contractEffectiveDate" expression="$func:contractEffectiveDate"/>
        <property name="uri.var.zuora.serviceActivationDate" expression="$func:serviceActivationDate"/>
        <property name="uri.var.zuora.termStartDate" expression="$func:termStartDate"/>
        <property name="uri.var.zuora.notes" expression="$func:notes"/>
        <property name="uri.var.zuora.invoiceCollect" expression="$func:invoiceCollect"/>
        <property name="uri.var.zuora.invoiceTargetDate" expression="$func:invoiceTargetDate"/>
        <property name="uri.var.zuora.invoiceSeparately" expression="$func:invoiceSeparately"/>
        <property name="uri.var.zuora.previewType" expression="$func:previewType"/>
        <property name="uri.var.zuora.includeExistingDraftInvoiceItems"
                  expression="$func:includeExistingDraftInvoiceItems"/>
        <property name="uri.var.zuora.autoRenew" expression="$func:autoRenew"/>
        <property name="uri.var.zuora.renewalTerm" expression="$func:renewalTerm"/>
        <property name="uri.var.zuora.renewalTermPeriodType" expression="$func:renewalTermPeriodType"/>
        <property name="uri.var.zuora.renewalSetting" expression="$func:renewalSetting"/>
        <property name="uri.var.zuora.invoice" expression="$func:invoice"/>
        <property name="uri.var.zuora.collect" expression="$func:collect"/>
        <property name="uri.var.zuora.applyCreditBalance" expression="$func:applyCreditBalance"/>
        <property name="uri.var.zuora.cfTxtnC" expression="$func:cfTxtnC"/>
        <property name="uri.var.zuora.cfPknC" expression="$func:cfPknC"/>
        <property name="uri.var.zuora.subscriptionKey" expression="$func:subscriptionKey"/>
        <property name="uri.var.zuora.currentTerm" expression="$func:currentTerm"/>
        <property name="uri.var.zuora.currentTermPeriodType" expression="$func:currentTermPeriodType"/>
        <property name="uri.var.zuora.update" expression="$func:update"/>
        <payloadFactory media-type="json">
            <format>
                {
                }
            </format>
            <args/>
        </payloadFactory>
        <property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>
        <script language="js">
            <![CDATA[
                var termStartDate = mc.getProperty('uri.var.zuora.termStartDate');
                var notes = mc.getProperty('uri.var.zuora.notes');
                var invoiceCollect = mc.getProperty('uri.var.zuora.invoiceCollect');
                var invoiceTargetDate = mc.getProperty('uri.var.zuora.invoiceTargetDate');
                var invoiceSeparately = mc.getProperty('uri.var.zuora.invoiceSeparately');
                var previewType = mc.getProperty('uri.var.zuora.previewType');
                var includeExistingDraftInvoiceItems = mc.getProperty('uri.var.zuora.includeExistingDraftInvoiceItems');
                var autoRenew = mc.getProperty('uri.var.zuora.autoRenew');
                var renewalTerm = mc.getProperty('uri.var.zuora.renewalTerm');
                var renewalTermPeriodType = mc.getProperty('uri.var.zuora.renewalTermPeriodType');
                var renewalSetting = mc.getProperty('uri.var.zuora.renewalSetting');
                var invoice = mc.getProperty('uri.var.zuora.invoice');
                var collect = mc.getProperty('uri.var.zuora.collect');
                var applyCreditBalance = mc.getProperty('uri.var.zuora.applyCreditBalance');
                var cfTxtnC = mc.getProperty('uri.var.zuora.cfTxtnC');
                var cfPknC = mc.getProperty('uri.var.zuora.cfPknC');
                var termType = mc.getProperty('uri.var.zuora.termType');
                var currentTerm = mc.getProperty('uri.var.zuora.currentTerm');
                var currentTermPeriodType = mc.getProperty('uri.var.zuora.currentTermPeriodType');
                var update = mc.getProperty('uri.var.zuora.update');

                payload = mc.getPayloadJSON();

                if (termStartDate != null && termStartDate != "") {
                payload.termStartDate=termStartDate;
                }
                if (notes != null && notes != "") {
                payload.notes=notes;
                }
                if (invoiceCollect != null && invoiceCollect != "") {
                payload.invoiceCollect=invoiceCollect;
                }
                if (invoiceTargetDate != null && invoiceTargetDate != "") {
                payload.invoiceTargetDate=invoiceTargetDate;
                }
                if (invoiceSeparately != null && invoiceSeparately != "") {
                payload.invoiceSeparately=invoiceSeparately;
                }
                if (previewType != null && previewType != "") {
                payload.previewType=previewType;
                }
                if (includeExistingDraftInvoiceItems != null && includeExistingDraftInvoiceItems != "") {
                payload.includeExistingDraftInvoiceItems=includeExistingDraftInvoiceItems;
                }
                if (autoRenew != null && autoRenew != "") {
                payload.autoRenew=autoRenew;
                }
                if (renewalTerm != null && renewalTerm != "") {
                payload.renewalTerm=renewalTerm;
                }
                if (renewalTermPeriodType != null && renewalTermPeriodType != "") {
                payload.renewalTermPeriodType=renewalTermPeriodType;
                }
                if (renewalSetting != null && renewalSetting != "") {
                payload.renewalSetting=renewalSetting;
                }
                if (invoice != null && invoice != "") {
                payload.invoice=invoice;
                }
                if (collect != null && collect != "") {
                payload.collect=collect;
                }
                if (applyCreditBalance != null && applyCreditBalance != "") {
                payload.applyCreditBalance=applyCreditBalance;
                }
                if (cfTxtnC != null && cfTxtnC != "") {
                payload.cf_txtn__c=cfTxtnC;
                }
                if (cfPknC != null && cfPknC != "") {
                payload.cf_pkn__c=cfPknC;
                }
                 if (termType != null && termType != "") {
                payload.termType=termType;
                }
                if (currentTerm != null && currentTerm != "") {
                payload.currentTerm=currentTerm;
                }
                if (currentTermPeriodType != null && currentTermPeriodType != "") {
                payload.currentTermPeriodType=currentTermPeriodType;
                }
                if (update != null && update != "") {
                payload.update=eval( "(" + update + ")" );
                }
                mc.setPayloadJSON(payload);
            ]]>
        </script>
        <call>
            <endpoint>
                <http method="PUT"
                      uri-template="{uri.var.zuora.apiUrl}/{uri.var.zuora.apiVersion}/subscriptions/{uri.var.zuora.subscriptionKey}"/>
            </endpoint>
        </call>
    </sequence>
</template>